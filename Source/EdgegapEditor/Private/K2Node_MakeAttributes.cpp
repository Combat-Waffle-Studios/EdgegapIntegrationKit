// Fill out your copyright notice in the Description page of Project Settings.


#include "K2Node_MakeAttributes.h"
#define LOCTEXT_NAMESPACE "UMG"

void UK2Node_MakeAttributes::AllocateDefaultPins()
{
	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();
	UEdGraphPin* Pin = CreatePin(EGPD_Input, K2Schema->PC_Struct, TEXT(""), GetClass(), TEXT("Target"));
	K2Schema->SetPinAutogeneratedDefaultValueBasedOnType(Pin);
	AddInputPin();
}

FText UK2Node_MakeAttributes::GetTooltipText() const
{
	return LOCTEXT("MakeAttributes_Tooltip", "Make Attributes");
}

FLinearColor UK2Node_MakeAttributes::GetNodeTitleColor() const
{
	return Super::GetNodeTitleColor();
}

FText UK2Node_MakeAttributes::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
	return FText::FromString("Create Attribute Set");
}

void UK2Node_MakeAttributes::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
	UClass* ActionKey = GetClass();

	if (ActionRegistrar.IsOpenForRegistration(ActionKey))
	{
		UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
		ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
	}
}

FSlateIcon UK2Node_MakeAttributes::GetIconAndTint(FLinearColor& OutColor) const
{
	return Super::GetIconAndTint(OutColor);
}

bool UK2Node_MakeAttributes::IsNodePure() const
{
	return true;
}

FText UK2Node_MakeAttributes::GetMenuCategory() const
{
	return FText::FromString("Custom Attributes");
}

void UK2Node_MakeAttributes::ExpandNode(FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph)
{
	Super::ExpandNode(CompilerContext, SourceGraph);
}

void UK2Node_MakeAttributes::AddInputPin()
{
	const UEdGraphSchema_K2* K2Schema = GetDefault<UEdGraphSchema_K2>();
	for(FEGIK_NamedType& Output : Outputs)
	{
		FName Type;
		FName SubCategory;

		UObject* Subtype = nullptr;
		switch (Output.Type)
		{
		case EEGIK_JsonType::JSON_Bool:
			Type = K2Schema->PC_Boolean;
			break;
		case EEGIK_JsonType::JSON_Number:
			Type = K2Schema->PC_Real;
			break;
		case EEGIK_JsonType::JSON_String:
			Type = K2Schema->PC_String;
			break;
		case EEGIK_JsonType::JSON_Object:
			Type = K2Schema->PC_Struct;
			break;
		default: ;
		}
		UEdGraphNode::FCreatePinParams OutputPinParams;
		OutputPinParams.ContainerType = Output.bIsArray ? EPinContainerType::Array : EPinContainerType::None;
		UEdGraphPin* OutputPin = CreatePin(EGPD_Output, Type, SubCategory, Subtype, Output.Name, OutputPinParams);
	}
	
}

void UK2Node_MakeAttributes::RemoveInputPin()
{
}

#undef LOCTEXT_NAMESPACE
